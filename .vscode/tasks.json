{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run dev-tools image (on Windows with PowerShell)",
            "type": "shell",
            // Checks if a container with name ${config:container_name} exists, otherwise creates it in detached mode with the proper parameters.
            "command": "if (!(docker ps -a --format '{{.Names}}' | Select-String -Quiet ${config:container_name})) { docker pull ${config:docker_image} ; docker run --privileged -e DISPLAY=\"host.docker.internal:0\" -v \"${workspaceFolder}:/app\" -t -d --name ${config:container_name} ${config:docker_image} }",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Run dev-tools image (on macOS)",
            "type": "shell",
            // Checks if a container with the name ${config:container_name} exists, and if it does, it is stopped and removed before a new container is created using the same name and other specified configuration parameters.
            "command": "docker ps -a --format '{{.Names}}' | grep -q ${config:container_name} && (docker container stop ${config:container_name} && docker container rm ${config:container_name}) ; docker pull ${config:docker_image} && docker run --user $(id -u):$(id -g) --privileged -e DISPLAY='host.docker.internal:0' -v '/tmp/.X11-unix:/tmp/.X11-unix' -v '${workspaceFolder}:/app' -t -d --name ${config:container_name} ${config:docker_image}",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Run dev-tools image (on Linux)",
            "type": "shell",
            // Checks if a container with the name ${config:container_name} exists, and if it does, it is stopped and removed before a new container is created using the same name and other specified configuration parameters.
            "command": "docker ps -a --format '{{.Names}}' | grep -q ${config:container_name} && (docker container stop ${config:container_name} && docker container rm ${config:container_name}) ; docker run --user $(id -u):$(id -g) --privileged -e DISPLAY=$DISPLAY -v '/dev/bus/usb:/dev/bus/usb' -v '/tmp/.X11-unix:/tmp/.X11-unix' -v '${workspaceFolder}:/app' -t -d --name ${config:container_name} ${config:docker_image}",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Open dev-tools container terminal",
            "type": "shell",
            // Opens a terminal of the dev-tools container.
            "command": "docker exec -it ${config:container_name} bash",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Build app",
            "type": "shell",
            // Builds the app in release mode using the make command, inside the docker container.
            "command": "docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=${input:sdk} && make -j'",
            "group": {
                "kind": "build",
                "isDefault": true
            }, 
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Build app [debug]",
            "type": "shell",
            // Builds the app with debug mode enabled using the make command, inside the docker container.
            "command": "docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=${input:sdk} && make -j DEBUG=1'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Clean build files",
            "type": "shell",
            // Cleans all app build files (for all device models).
            "command": "docker exec -it ${config:container_name} bash -c 'make clean'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Test app with Speculos",
            "type": "shell",
            // Runs the app on the speculos emulator for the selected device model, in the docker container.
            "command":"docker exec -it ${config:container_name} bash -c 'speculos --model ${input:model} build/${input:model}/bin/app.elf'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Kill Speculos",
            "type": "shell",
            // Kills speculos emulator in the docker container.
            "command": "docker exec -it ${config:container_name} bash -c 'pkill -f speculos'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Run functional tests",
            "type": "shell",
            // Runs functional tests inside the docker container (with Qt display disabled).
            "command": "docker exec -it ${config:container_name} bash -c 'pytest tests/ --tb=short -v --device ${input:model}'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Run functional tests (with display)",
            "type": "shell",
            // Runs functional tests inside the docker container (with Qt display enabled).
            "command": "docker exec -it ${config:container_name} bash -c 'pytest tests/ --tb=short -v --device ${input:model} --display'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Install tests requirements",
            "type": "shell",
            // Installs functional tests python requirements in the docker container. 
            "command":"docker exec -it ${config:container_name} bash -c 'pip3 install -r tests/requirements.txt'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Load app on device (Linux)",
            "type": "shell",
            // Copies the ledger udev rule file to the /etc/udev/rules.d/ directory if it does not exist, then reloads the rules and triggers udev. After that, it executes make load in the container to load the app on a physical device.
            "command": "if [ ! -f '/etc/udev/rules.d/${config:linux_udev_ledgerblue_rule_file}' ]; then sudo cp .vscode/${config:linux_udev_ledgerblue_rule_file} /etc/udev/rules.d/ && sudo udevadm control --reload-rules && sudo udevadm trigger; fi && docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=${input:sdk} && make load'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Load app on device (macOS)",
            "type": "shell",
            // Checks that virtual env is installed, otherwise installs it. Then installs ledgerblue in a virtualenv and side loads the app APDU file.
            "command": "cmd=\"[ -d 'ledger' ] || python3 -m virtualenv ledger && source ledger/bin/activate && python3 -m pip install ledgerblue && python3 -m ledgerblue.runScript --scp --fileName bin/app.apdu --elfFile bin/app.elf\"; if python3 -m virtualenv --version >/dev/null 2>&1; then eval \"${cmd}\"; else python3 -m pip install virtualenv && eval \"${cmd}\"; fi",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Load app on device (Windows with PowerShell)",
            "type": "shell",
            // Checks that virtual env is installed, otherwise installs it. Then installs ledgerblue in a virtualenv and side loads the app APDU file.
            "command": "cmd.exe /C 'if exist ledger (call ledger\\Scripts\\activate.bat && python -m ledgerblue.runScript --scp --fileName bin/app.apdu --elfFile bin/app.elf) else (python -m pip install virtualenv && python -m venv ledger && call ledger\\Scripts\\activate.bat && python -m pip install ledgerblue && python -m ledgerblue.runScript --scp --fileName bin/app.apdu --elfFile bin/app.elf)'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
    ],
    "inputs": [
        {
            "id" : "sdk",
            "type": "pickString",
            "description": "Choose a SDK to build with",
            "options": [
                "/opt/nanos-secure-sdk",
                "/opt/nanox-secure-sdk",
                "/opt/nanosplus-secure-sdk",
                "/opt/stax-secure-sdk",
            ]
        },
        {
            "id" : "model",
            "type": "pickString",
            "description": "Which model to run speculos for ?",
            "options": [
                "nanos",
                "nanox",
                "nanosp",
                "stax",
            ]
        }
    ]
}
